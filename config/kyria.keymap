/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// west build -d build/left -b nice_nano -- -DSHIELD=kyria_left
// west build -d build/right -b nice_nano -- -DSHIELD=kyria_right

#define _DEFAULT 0
#define _NUMBER  1
#define _SYMBOL  2
#define _FN      3
#define _COLOR   4
#define _CRAZY   5

/ {

  behaviors {
    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping_term_ms = <150>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

  combos {
    compatible = "zmk,combos";
    combo_ret {
      timeout-ms = <50>;
      key-positions = <19 20>; // J K
      bindings = <&kp RET>;
    };

    combo_space {
      timeout-ms = <50>;
      key-positions = <14 16>; // S F
      bindings = <&kp SPACE>;
    };
    
    combo_cmdspace {
      timeout-ms = <50>;
      key-positions = <43 46>;
      bindings = <&kp LG(SPACE)>;
    };
  };

	keymap {
		compatible = "zmk,keymap";

		default_layer {
// -----------------------------------------------------------------------------------------------------------------------------------
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \   |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | GUI  | LALT | LGUI |   RET   |  GRAVE  |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |
			bindings = <
	&kp ESC       &lt _FN Q    &kp W  &kp E       &kp R          &kp T                                                  &kp Y   &kp U    &kp I      &kp O    &kp P             &kp BSPC
	&kp TAB       &kp A        &kp S  &kp D       &lt _NUMBER F  &kp G                                                  &kp H   &kp J    &kp K      &kp L    &lt _SYMBOL SEMI  &hm RGUI SQT
	&mt LSHFT ESC &mt LCTRL Z  &kp X  &kp C       &kp V          &kp B     &none    &mo _COLOR  &to _NUMBER  &none      &kp N   &kp M    &kp COMMA  &kp DOT  &mt RCTRL FSLH    &kp RSHFT
	                               &kp K_MUTE  &kp LALT       &kp LGUI  &kp RET  &kp GRAVE   &sl _CRAZY   &kp SPACE  &kp N0  &kp DOT  &kp RCTL
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		number_layer {
			bindings = <
	&to _DEFAULT  &kp Q        &kp W  &kp LBRC  &kp RBRC  &kp PIPE                                                &kp STAR   &kp N7   &kp N8  &kp N9  &kp EQUAL          &kp BSPC
	&kp TAB       &kp LSHFT    &kp S  &kp LPAR  &kp RPAR  &kp BSLH                                                &kp COLON  &kp N4   &kp N5  &kp N6  &lt _SYMBOL MINUS  &kp UNDER
	&kp LSHFT     &mt LCTRL Z  &kp X  &kp LBKT  &kp RBKT  &kp TILDE  &none    &none      &to _DEFAULT  &none      &kp AMPS   &kp N1   &kp N2  &kp N3  &kp FSLH           &kp RSHFT
	                                  &kp LGUI  &kp LALT  &kp LGUI   &kp RET  &kp GRAVE  &kp RET       &kp SPACE  &kp N0     &kp DOT  &trans
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		};

		symbol_layer {
			bindings = <
	&kp ESC    &kp EXCL   &kp AT      &kp LBRC  &kp RBRC  &kp PIPE                                           &kp HOME  &kp LG(LEFT)  &kp PGUP  &kp LG(RIGHT)  &kp END   &kp BSLH
	&kp TAB    &kp HASH   &kp DOLLAR  &kp LPAR  &kp RPAR  &kp BSLH                                           &kp LEFT  &kp DOWN      &kp UP    &kp RIGHT      &kp SEMI  &kp SQT
	&kp LSHFT  &kp PRCNT  &kp CARET   &kp LBKT  &kp RBKT  &kp TILDE  &none    &none      &none    &kp LSHFT  &kp AMPS  &kp LA(LEFT)  &kp PGDN  &kp LA(RIGHT)  &kp FSLH  &kp RSHFT
	                                  &kp LGUI  &kp LALT  &kp LGUI   &kp RET  &kp GRAVE  &kp RET  &kp SPACE  &trans    &trans        &trans
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		fn_layer {
			bindings = <
	&kp ESC    &kp Q        &kp W  &kp E     &kp R     &kp T                                               &kp STAR   &kp F7    &kp F8    &kp F9  &kp PLUS   &kp DEL
	&kp TAB    &kp A        &kp S  &kp D     &kp F     &kp G                                               &kp COLON  &kp F4    &kp F5    &kp F6  &kp MINUS  &kp UNDER
	&kp LSHFT  &mt LCTRL Z  &kp X  &kp C     &kp V     &kp B     &none    &kp LSHFT  &kp LSHFT  &kp LSHFT  &kp AMPS   &kp F1    &kp F2    &kp F3  &kp EQUAL  &kp RSHFT
	                               &kp LGUI  &kp LALT  &kp LGUI  &kp RET  &kp GRAVE  &kp RET    &kp SPACE  &kp F10    &kp BSPC  &kp RALT
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		color_layer {
			bindings = <
	&bootloader   &rgb_ug RGB_EFF  &rgb_ug RGB_SPI                   &rgb_ug RGB_BRI                    &rgb_ug RGB_SAI                     &rgb_ug RGB_HUI                                                               &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &bootloader
	&reset        &rgb_ug RGB_EFR  &rgb_ug RGB_SPD                   &rgb_ug RGB_BRD                    &rgb_ug RGB_SAD                     &rgb_ug RGB_HUD                                                               &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &reset
	&none         &mt LCTRL Z      &rgb_ug RGB_COLOR_HSB(0,100,100)  &rgb_ug RGB_COLOR_HSB(90,100,100)  &rgb_ug RGB_COLOR_HSB(120,100,100)  &rgb_ug RGB_COLOR_HSB(270,100,100)  &kp LSHFT  &none            &none  &none  &none  &none  &none  &none  &none  &kp U
	                                                                &kp LGUI                           &ext_power EP_OFF                   &ext_power EP_ON                    &kp RET    &rgb_ug RGB_TOG  &none  &none  &none  &none  &none
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		crazy_layer {
			bindings = <
	&bt BT_SEL 2  &out OUT_USB  &none           &none              &none  &none                              &none              &none                  &none  &none  &kp LG(BSLH)  &bt BT_CLR
	&bt BT_SEL 1  &out OUT_BLE  &kp LA(LG(N5))  &none              &none  &none                              &none              &none                  &none  &none  &none         &none
	&bt BT_SEL 0  &out OUT_TOG  &none           &kp LS(LC(LG(C)))  &none  &none  &none  &none  &none  &none  &kp LC(LA(LG(N)))  &kp LS(LC(LA(LG(M))))  &none  &none  &none         &none
	                                     &none              &none  &none  &none  &none  &none  &none  &none              &none                  &none
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};
	};
};
